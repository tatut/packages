/**********************************************************************
 * Extern for ReactLeaflet
 * Generated by http://jmmk.github.io/javascript-externs-generator
 * Loaded JavaScript files:
 * https://unpkg.com/react@16.4.1/umd/react.production.min.js
 * https://unpkg.com/react-leaflet@2.0.1/dist/react-leaflet.min.js
 * The end of the file contains manual additions.
 **********************************************************************/
var ReactLeaflet = {
  "AttributionControl": {
    "$$typeof": {},
    "render": {
      "displayName": {}
    }
  },
  "Circle": {
    "$$typeof": {},
    "render": {
      "displayName": {}
    }
  },
  "CircleMarker": {
    "$$typeof": {},
    "render": {
      "displayName": {}
    }
  },
  "ControlledLayer": function () {},
  "DivOverlay": function () {},
  "FeatureGroup": {
    "$$typeof": {},
    "render": {
      "displayName": {}
    }
  },
  "GeoJSON": {
    "$$typeof": {},
    "render": {
      "displayName": {}
    }
  },
  "GridLayer": function () {},
  "ImageOverlay": {
    "$$typeof": {},
    "render": {
      "displayName": {}
    }
  },
  "LayerGroup": {
    "$$typeof": {},
    "render": {
      "displayName": {}
    }
  },
  "LayersControl": {
    "$$typeof": {},
    "BaseLayer": function () {},
    "Overlay": function () {},
    "render": {
      "displayName": {}
    }
  },
  "LeafletConsumer": {
    "$$typeof": {},
    "Consumer": {},
    "Provider": {
      "$$typeof": {},
      "_context": {}
    },
    "_calculateChangedBits": {},
    "_changedBits": {},
    "_changedBits2": {},
    "_currentValue": {},
    "_currentValue2": {},
    "_defaultValue": {}
  },
  "LeafletProvider": {
    "$$typeof": {},
    "_context": {
      "$$typeof": {},
      "Consumer": {},
      "Provider": {},
      "_calculateChangedBits": {},
      "_changedBits": {},
      "_changedBits2": {},
      "_currentValue": {},
      "_currentValue2": {},
      "_defaultValue": {}
    }
  },
  "Map": function () {},
  "MapComponent": function () {},
  "MapControl": function () {},
  "MapLayer": function () {},
  "Marker": {
    "$$typeof": {},
    "render": {
      "displayName": {}
    }
  },
  "Pane": {
    "$$typeof": {},
    "render": {
      "displayName": {}
    }
  },
  "Path": function () {},
  "Polygon": {
    "$$typeof": {},
    "render": {
      "displayName": {}
    }
  },
  "Polyline": {
    "$$typeof": {},
    "render": {
      "displayName": {}
    }
  },
  "Popup": {
    "$$typeof": {},
    "render": {
      "displayName": {}
    }
  },
  "Rectangle": {
    "$$typeof": {},
    "render": {
      "displayName": {}
    }
  },
  "ScaleControl": {
    "$$typeof": {},
    "render": {
      "displayName": {}
    }
  },
  "TileLayer": {
    "$$typeof": {},
    "render": {
      "displayName": {}
    }
  },
  "Tooltip": {
    "$$typeof": {},
    "render": {
      "displayName": {}
    }
  },
  "VideoOverlay": {
    "$$typeof": {},
    "render": {
      "displayName": {}
    }
  },
  "WMSTileLayer": {
    "$$typeof": {},
    "render": {
      "displayName": {}
    }
  },
  "ZoomControl": {
    "$$typeof": {},
    "render": {
      "displayName": {}
    }
  },
  "withLeaflet": function () {}
};
ReactLeaflet.ControlledLayer.prototype = {
  "addLayer": function () {},
  "componentDidUpdate": function () {},
  "componentWillUnmount": function () {},
  "forceUpdate": function () {},
  "isReactComponent": function () {},
  "removeLayer": function () {},
  "render": function () {},
  "setState": function () {}
};
ReactLeaflet.DivOverlay.prototype = {
  "bindLeafletEvents": function () {},
  "componentDidMount": function () {},
  "componentDidUpdate": function () {},
  "componentWillUnmount": function () {},
  "createLeafletElement": function () {},
  "extractLeafletEvents": function () {},
  "fireLeafletEvent": function () {},
  "forceUpdate": function () {},
  "getOptions": function () {},
  "isReactComponent": function () {},
  "onRender": function () {},
  "render": function () {},
  "setState": function () {},
  "updateLeafletElement": function () {}
};
ReactLeaflet.GridLayer.prototype = {
  "bindLeafletEvents": function () {},
  "componentDidMount": function () {},
  "componentDidUpdate": function () {},
  "componentWillUnmount": function () {},
  "createLeafletElement": function () {},
  "extractLeafletEvents": function () {},
  "fireLeafletEvent": function () {},
  "forceUpdate": function () {},
  "getOptions": function () {},
  "isReactComponent": function () {},
  "render": function () {},
  "setState": function () {},
  "updateLeafletElement": function () {}
};
ReactLeaflet.LayersControl.BaseLayer.prototype = {
  "addLayer": function () {},
  "componentDidUpdate": function () {},
  "componentWillUnmount": function () {},
  "forceUpdate": function () {},
  "isReactComponent": function () {},
  "removeLayer": function () {},
  "render": function () {},
  "setState": function () {}
};
ReactLeaflet.LayersControl.Overlay.prototype = {
  "addLayer": function () {},
  "componentDidUpdate": function () {},
  "componentWillUnmount": function () {},
  "forceUpdate": function () {},
  "isReactComponent": function () {},
  "removeLayer": function () {},
  "render": function () {},
  "setState": function () {}
};
ReactLeaflet.Map.prototype = {
  "bindLeafletEvents": function () {},
  "componentDidMount": function () {},
  "componentDidUpdate": function () {},
  "componentWillUnmount": function () {},
  "createLeafletElement": function () {},
  "extractLeafletEvents": function () {},
  "fireLeafletEvent": function () {},
  "forceUpdate": function () {},
  "getOptions": function () {},
  "isReactComponent": function () {},
  "render": function () {},
  "setState": function () {},
  "shouldUpdateBounds": function () {},
  "shouldUpdateCenter": function () {},
  "updateLeafletElement": function () {}
};
ReactLeaflet.MapComponent.prototype = {
  "bindLeafletEvents": function () {},
  "componentDidMount": function () {},
  "componentDidUpdate": function () {},
  "componentWillUnmount": function () {},
  "extractLeafletEvents": function () {},
  "fireLeafletEvent": function () {},
  "forceUpdate": function () {},
  "getOptions": function () {},
  "isReactComponent": function () {},
  "setState": function () {}
};
ReactLeaflet.MapControl.prototype = {
  "componentDidMount": function () {},
  "componentDidUpdate": function () {},
  "componentWillUnmount": function () {},
  "createLeafletElement": function () {},
  "forceUpdate": function () {},
  "isReactComponent": function () {},
  "render": function () {},
  "setState": function () {},
  "updateLeafletElement": function () {}
};
ReactLeaflet.MapLayer.prototype = {
  "bindLeafletEvents": function () {},
  "componentDidMount": function () {},
  "componentDidUpdate": function () {},
  "componentWillUnmount": function () {},
  "createLeafletElement": function () {},
  "extractLeafletEvents": function () {},
  "fireLeafletEvent": function () {},
  "forceUpdate": function () {},
  "getOptions": function () {},
  "isReactComponent": function () {},
  "render": function () {},
  "setState": function () {},
  "updateLeafletElement": function () {}
};
ReactLeaflet.Path.prototype = {
  "bindLeafletEvents": function () {},
  "componentDidMount": function () {},
  "componentDidUpdate": function () {},
  "componentWillUnmount": function () {},
  "createLeafletElement": function () {},
  "extractLeafletEvents": function () {},
  "fireLeafletEvent": function () {},
  "forceUpdate": function () {},
  "getOptions": function () {},
  "getPathOptions": function () {},
  "isReactComponent": function () {},
  "render": function () {},
  "setState": function () {},
  "setStyle": function () {},
  "setStyleIfChanged": function () {},
  "updateLeafletElement": function () {}
};
/**********************************************************************
 * End Generated Extern for ReactLeaflet
/**********************************************************************/

// Manual additions
ReactLeaflet.leafletElement = {};
